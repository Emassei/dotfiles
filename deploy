#!/bin/sh

declare -A repos=(
	[st]='git@github.com:Emassei/st.git'
	[dmenu]='git@github.com:Emassei/dmenu.git'
	[dwm]='git@github.com:Emassei/dwm.git'
	[dwmblocks]='git@github.com:Emassei/dwmblocks.git'
	[slock]='git://git.suckless.org/slock'
)

suckless_tools=('st' 'dmenu' 'dwm' 'dwmblocks' 'slock')

prompt_install() {
	echo -n "$1 is not installed. Would you like to install it? (y/n) " >&2
	old_stty_cfg=$(stty -g)
	stty raw -echo
	answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
	stty $old_stty_cfg && echo
	if echo "$answer" | grep -iq "^y" ;then
		# This could def use community support
		if [[ " ${suckless_tools[@]}"  =~ " $1 " ]]; then
			cd $HOME/code/
			git clone ${repos[$1]}
			cd $1
			sudo make install
		elif [ -x "$(command -v apt-get)" ]; then
			sudo apt-get install $1 -y

		elif [ -x "$(command -v brew)" ]; then
			brew install $1

		elif [ -x "$(command -v pkg)" ]; then
			sudo pkg install $1

		elif [ -x "$(command -v pacman)" ]; then
			sudo pacman -S $1
	else
			echo "I'm not sure what your package manager is! Please install $1 on your own and run this deploy script again. Tests for package managers are in the deploy script you just ran starting at line 13. Feel free to make a pull request at https://github.com/parth/dotfiles :)"
		fi
	fi
}

check_for_software() {
	echo "Checking to see if $1 is installed"
	if ! [ -x "$(command -v $1)" ]; then
		prompt_install $1
	else
		echo "$1 is installed."
	fi
}

check_for_directory() {
	echo "Check for directory structure"
	DIR='code'
	if [ -d "$DIR" ]; then
		echo "$DIR exists"
	else
		echo "Making code directory"
		mkdir $HOME/$DIR
	fi
}

check_default_shell() {
	if [ -z "${SHELL##*zsh*}" ] ;then
			echo "Default shell is zsh."
	else
		echo -n "Default shell is not zsh. Do you want to chsh -s \$(which zsh)? (y/n)"
		old_stty_cfg=$(stty -g)
		stty raw -echo
		answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
		stty $old_stty_cfg && echo
		if echo "$answer" | grep -iq "^y" ;then
			chsh -s $(which zsh)
		else
			echo "Warning: Your configuration won't work properly. If you exec zsh, it'll exec tmux which will exec your default shell which isn't zsh."
		fi
	fi
}

echo "We're going to do the following:"
echo "1. Check to make sure you have zsh, vim, and tmux installed"
echo "2. We'll help you install them if you don't"
echo "3. We're going to check to see if your default shell is zsh"
echo "4. We'll try to change it if it's not"

echo "Let's get started? (y/n)"
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
	echo
else
	echo "Quitting, nothing was changed."
	exit 0
fi


check_for_software zsh
echo
check_for_software vim
echo
check_for_software tmux
echo
check_for_directory
echo
check_for_software st
echo
check_for_software dmenu
echo
check_for_software dwm
echo
check_for_software dwmblocks
echo
check_for_software slock
echo

check_default_shell

echo
echo -n "Would you like to backup your current dotfiles? (y/n) "
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty $old_stty_cfg
if echo "$answer" | grep -iq "^y" ;then
	mv ~/.zshrc ~/.zshrc.old
	mv ~/.tmux.conf ~/.tmux.conf.old
	mv ~/.vimrc ~/.vimrc.old
else
	echo -e "\nNot backing up old dotfiles."
fi

mkdir $HOME/.config/zsh
mkdir -p $HOME/.local/share/zsh/history/
touch $HOME/.local/share/zsh/history/.zsh_history
printf "source '$HOME/dotfiles/zsh/zshrc_manager.sh'" > ~/.config/zsh/.zshrc
printf "so $HOME/dotfiles/vim/vimrc.vim" > ~/.vimrc
printf "source-file $HOME/dotfiles/tmux/tmux.conf" > ~/.config/tmux/.tmux.conf
printf "#!/bin/sh\nsource $HOME/dotfiles/xinitrc" > ~/.xinitrc
printf "#!/bin/zsh\nsource $HOME/dotfiles/zprofile" > ~/.zprofile
printf "[include]" "%s\n" "    path = $HOME/dotfiles/gitconfig/.gitconfig" > ~/.gitconfig
mkdir $HOME/.config/nvim
printf "so $HOME/dotfiles/vim/vimrc.vim" > ~/.config/nvim/init.vim

# see https://github.com/junegunn/vim-plug if this is outdated.
sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

if [ -x "$(command -v pacman)" ]; then
	# Install packages
	sudo pacman -S flameshot dunst picom base base-devel neovim networkmanager grub xorg-server xorg-xinit git noto-fonts ntfs-3g xbindkeys libnotify tldr ttf-joypixels ranger mpv ueberzug xclip pavucontrol pulseaudio zathura zathura-pdf-mupdf libreoffice-fresh calibre neofetch fzf arp-scan node bc intel-ucode perl-xml-xpath clipmenu xsel

	ln ~/dotfiles/apps/zathura/zathurarc ~/.config/zathura/zathurarc

	# AUR installer
	cd $HOME/code
	git clone https://aur.archlinux.org/yay.git
	cd yay
	makepkg -si

	# This is for the icons to appear on suckless tools
	yay -S libxft-bgra-git
	# Brave install
	yay -S brave-bin

  # getting image preview to work
	ranger --copy-config=all
	sed -i -e 's/set preview_images_method w3m/set preview_images_method ueberzug/' $HOME/.config/ranger/rc.conf

	# Putting in the arch logo
	cp $HOME/dotfiles/arch_logo /etc/issue
fi

# for instant markdown to work
npm -g install instant-markdown-d

echo
echo "Please log out and log back in for default shell to be initialized."
